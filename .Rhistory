summarize(`mean_diff:`=diff(means))
rand_dist<-vector()
for(i in 1:5000){
new<-data.frame(Pace=sample(Strava_Data$Pace),Race=Strava_Data$Race)
rand_dist[i]<-mean(new[new$Race=="Yes",]$Pace)-
mean(new[new$Race=="No",]$Pace)}
{hist(rand_dist,main="",ylab=""); abline(v = -0.4238789,col="red")}
mean(rand_dist>0.4238789)*2
Strava_Data$Distance_c<-Strava_Data$Distance-mean(Strava_Data$Distance)
fit<-lm(Pace ~ Distance_c * Terrain, data=Strava_Data)
summary(fit)
mean(Strava_Data$Distance)
sd(Strava_Data$Distance)
ggplot(Strava_Data, aes(x=Distance_c, y=Pace,group=Terrain))+geom_point(aes(color=Terrain))+
geom_smooth(method="lm",formula=y~1,se=F,fullrange=T,aes(color=Terrain))+
theme(legend.position=c(.9,.19))+xlab("")
resids<-fit$residuals
fitvals<-fit$fitted.values
ggplot()+geom_point(aes(fitvals,resids))+geom_hline(yintercept=0, col="red")
ggplot()+geom_histogram(aes(resids),bins=20)
bptest(fit)
coeftest(fit, vcov=vcovHC(fit))
RsquareAdj(fit)
fit1 <- lm(Pace ~ Distance_c + Terrain, data=Strava_Data)
summary(fit1)
newdat<-Strava_Data
fit1 <- lm(Pace ~ Distance_c + Terrain, data=Strava_Data)
resids<-fit1$residuals
fitted<-fit1$fitted.values
resid_resamp<-replicate(5000,{
new_resids<-sample(resids,replace=TRUE)
newdat$new_Pace<-fitted+new_resids
fit2<-lm(new_Pace ~ Distance_c * Terrain, data = newdat)
coef(fit2)
})
resid_resamp%>%t%>%as.data.frame%>%summarize_all(sd)
dat<-Strava_Data%>%mutate(y=ifelse(Race=="Yes",1,0))
fit3<- glm( y ~ Distance + Pace + Terrain, data=dat, family="binomial")
summary(fit3)
exp(coef(fit3))
dat$prob<-predict(fit3,type="response")
table(predict=as.numeric(dat$prob>.5),truth=dat$y)%>%addmargins
dat$logit<-predict(fit3,type="link")
dat%>%ggplot()+geom_density(aes(logit,color=Race,fill=Race), alpha=.4)+
theme(legend.position=c(.85,.85))+geom_vline(xintercept=0)+xlab("predictor (logit)")
ROCplot<-ggplot(dat)+geom_roc(aes(d=y,m=prob), n.cuts=0)
ROCplot
calc_auc(ROCplot)
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]
truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1)
FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
dat1<- dat%>%select(-prob,-logit,-Distance_c, -Race)
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))}
apply(diags, 2, mean)
lassodat <- Strava_Data%>%mutate(y=ifelse(Race=="Yes",1,0))%>%
select(-Race, -Location, -Distance_c)
fit5 <- glm(y ~ ., data = lassodat, family = "binomial")
x <- model.matrix(fit5)
x <- x[, -1]
y <- as.matrix(lassodat$y)
cv.lasso <- cv.glmnet(x, y, family = "binomial")
lasso <- glmnet(x, y, lambda = cv.lasso$lambda.1se, family = "binomial")
coef(lasso)
dat2 <- lassodat %>% mutate(a = ifelse(TimeOfDay == "Midday", 1, 0),
b = ifelse(Day == "Saturday", 1, 0), c=ifelse(Day=="Sunday",1,0), d=ifelse(Terrain=="Mixed",1,0))
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))}
apply(diags1, 2, mean)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
library(readr)
library(ggplot2)
library(lmtest)
library(sandwich)
library(vegan)
library(plotROC)
library(glmnet)
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
library(readr)
library(ggplot2)
library(lmtest)
library(sandwich)
library(vegan)
library(plotROC)
library(glmnet)
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
library(readr)
library(ggplot2)
library(lmtest)
library(sandwich)
library(vegan)
library(plotROC)
#library(glmnet)
library(Matrix)
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
library(readr)
library(ggplot2)
library(lmtest)
library(sandwich)
library(vegan)
library(plotROC)
#library(glmnet)
#library(Matrix)
Strava_Data <- read_csv("Strava Data2.csv",
col_types = cols(Date = col_date(format = "%m/%d/%Y"),
Day = col_character(), Distance = col_number(),
Elevation = col_number(), Location = col_character(),
Pace = col_number(), Race = col_factor(levels = c("No",
"Yes")), Terrain = col_factor(levels = c("Trail",
"Mixed", "Road", "Treadmill")),
Time = col_number(), TimeOfDay = col_factor(levels = c("Morning",
"Midday", "Afternoon", "Evening",
"Night"))))
dat1<- dat%>%select(-prob,-logit,-Distance_c, -Race)
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))}
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))}
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))
apply(diags, 2, mean)}
diags%>%summarize_all(mean)
dat2 <- lassodat %>% mutate(a = ifelse(TimeOfDay == "Midday", 1, 0),
b = ifelse(Day == "Saturday", 1, 0), c=ifelse(Day=="Sunday",1,0), d=ifelse(Terrain=="Mixed",1,0))
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))
apply(diags1, 2, mean)}
diags%>%summarize_all(mean)
library(Matrix)
remove.packages("Matrix", lib="~/R/win-library/3.5")
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
library(readr)
library(ggplot2)
library(lmtest)
library(sandwich)
library(vegan)
library(plotROC)
library(glmnet)
Strava_Data <- read_csv("Strava Data2.csv",
col_types = cols(Date = col_date(format = "%m/%d/%Y"),
Day = col_character(), Distance = col_number(),
Elevation = col_number(), Location = col_character(),
Pace = col_number(), Race = col_factor(levels = c("No",
"Yes")), Terrain = col_factor(levels = c("Trail",
"Mixed", "Road", "Treadmill")),
Time = col_number(), TimeOfDay = col_factor(levels = c("Morning",
"Midday", "Afternoon", "Evening",
"Night"))))
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))
apply(diags, 2, mean)}
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))}
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))
apply(diags, 2, mean)}
diags%>%summarize_all(mean)
diags%>%summarize_all(mean)
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))
apply(diags, 2, mean)}
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))}
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))
apply(diags, 2, mean)}
diags%>%summarize_all(mean)
lassodat <- Strava_Data%>%mutate(y=ifelse(Race=="Yes",1,0))%>%
select(-Race, -Location, -Distance_c)
lassodat <- Strava_Data%>%mutate(y=ifelse(Race=="Yes",1,0))%>%
select(-Race, -Location)
fit5 <- glm(y ~ ., data = lassodat, family = "binomial")
x <- model.matrix(fit5)
x <- x[, -1]
y <- as.matrix(lassodat$y)
cv.lasso <- cv.glmnet(x, y, family = "binomial")
lasso <- glmnet(x, y, lambda = cv.lasso$lambda.1se, family = "binomial")
coef(lasso)
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))
apply(diags1, 2, mean)
}
diags%>%summarize_all(mean)
diags%>%summarize_all(mean)
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))
apply(diags1, 2, mean)
}
diags%>%summarize_all(mean)
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))
apply(diags1, 2, mean)
}
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))
apply(diags1, 2, mean)}
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))}
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))
apply(diags1, 2, mean)}
diags%>%summarize_all(mean)
dat1<- dat%>%select(-prob,-logit,-Distance_c, -Race)
k=10
data1<-dat1[sample(nrow(dat1)),]
folds<-cut(seq(1:nrow(dat1)),breaks=k,labels=F)
diags<-NULL
for(i in 1:k){
train<-data1[folds!=i,]
test<-data1[folds==i,]
truth<-test$y
fit4<-glm(y~Distance+Pace+Terrain,data=train,family="binomial")
probs<-predict(fit4,newdata = test,type="response")
diags<-rbind(diags,class_diag(probs,truth))
apply(diags, 2, mean)}
diags%>%summarize_all(mean)
lassodat <- Strava_Data%>%mutate(y=ifelse(Race=="Yes",1,0))%>%
select(-Race, -Location)
fit5 <- glm(y ~ ., data = lassodat, family = "binomial")
x <- model.matrix(fit5)
x <- x[, -1]
y <- as.matrix(lassodat$y)
cv.lasso <- cv.glmnet(x, y, family = "binomial")
lasso <- glmnet(x, y, lambda = cv.lasso$lambda.1se, family = "binomial")
coef(lasso)
dat2 <- lassodat %>% mutate(a = ifelse(TimeOfDay == "Midday", 1, 0),
b = ifelse(Day == "Saturday", 1, 0), c=ifelse(Day=="Sunday",1,0), d=ifelse(Terrain=="Mixed",1,0))
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))
apply(diags1, 2, mean)}
k=10
data2<-dat2[sample(nrow(dat2)),]
folds1<-cut(seq(1:nrow(dat2)),breaks=k,labels=F)
diags1<-NULL
for(i in 1:k){
train1<-data2[folds!=i,]
test1<-data2[folds==i,]
truth1<-test1$y
fit6 <- glm(y ~ a + b + c+ d + Date + Distance + Pace + Elevation, data = train1, family = "binomial")
probs1<-predict(fit6,newdata = test1,type="response")
diags1<-rbind(diags1,class_diag(probs1,truth1))
apply(diags1, 2, mean)}
diags%>%summarize_all(mean)
blogdown::serve_site()
